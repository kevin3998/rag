# rag_system/graph_state.py

from typing import List, Optional, Dict, Any, Union, TypedDict
# [修复] 确保从pydantic V2直接导入
from pydantic import BaseModel, Field
from langchain_core.messages import BaseMessage

class Step(BaseModel):
    """Represents a single step in a plan, to be executed by a tool."""
    step_id: int = Field(..., description="The unique identifier for the step, starting from 1.")
    tool_name: str = Field(..., description="The name of the tool to be called for this step.")
    tool_input: Dict[str, Any] = Field(..., description="The dictionary of parameters to be passed to the tool.")
    reasoning: str = Field(..., description="The Planner's reasoning for this step.")

    # ================== [ 关 键 修 复 ] ==================
    # 将 result 的类型从 Optional[str] 修改为 Any。
    # 这允许工具返回任何类型的结果（如list, dict, str），使框架更健壮。
    result: Any = Field(None, description="The raw output returned by the tool after execution.")
    # =====================================================

    is_success: bool = Field(False, description="Whether the step was executed successfully.")
    error_message: Optional[str] = Field(None, description="Error message if the execution failed.")


class Plan(BaseModel):
    """Represents the entire plan generated by the Planner."""
    goal: str = Field(..., description="The user's original, high-level goal.")
    steps: List[Step] = Field(default_factory=list, description="The list of all steps that make up the plan.")


class Reflection(BaseModel):
    """Represents the Reflector's assessment of a single step's execution."""
    critique: str = Field(..., description="The LLM's critique of the step's outcome.")
    is_success: bool = Field(..., description="Whether the Reflector deems the step successful.")
    confidence: float = Field(..., description="The confidence score (0.0 to 1.0) in the success assessment.")
    suggestion: str = Field(..., description="A suggestion for what to do next.")
    is_finished: bool = Field(False, description="Whether the entire task is considered finished.")


class GraphState(TypedDict):
    """The central state of the graph, passed between all nodes."""
    initial_query: str
    plan: Optional[Plan]
    history: List[Union[Step, Reflection, str]]
    error_count: int
    final_answer: Optional[str]
    chat_history: List[BaseMessage]
